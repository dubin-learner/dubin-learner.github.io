<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>__memcpy_generic (1,000 samples, 0.85%)</title><rect x="726.1" y="117" width="10.1" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="729.07" y="127.5" ></text>
</g>
<g >
<title>_IO_file_sync@@GLIBC_2.17 (1,000 samples, 0.85%)</title><rect x="70.5" y="101" width="10.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="73.51" y="111.5" ></text>
</g>
<g >
<title>memset (1,000 samples, 0.85%)</title><rect x="221.8" y="133" width="10.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="224.79" y="143.5" ></text>
</g>
<g >
<title>strcmp (1,000 samples, 0.85%)</title><rect x="1099.2" y="85" width="10.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1102.23" y="95.5" ></text>
</g>
<g >
<title>_IO_file_doallocate (5,000 samples, 4.27%)</title><rect x="675.6" y="85" width="50.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="678.64" y="95.5" >_IO_f..</text>
</g>
<g >
<title>__vfprintf_internal (39,000 samples, 33.33%)</title><rect x="363.0" y="149" width="393.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="365.99" y="159.5" >__vfprintf_internal</text>
</g>
<g >
<title>_dl_fini (1,000 samples, 0.85%)</title><rect x="242.0" y="165" width="10.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="244.97" y="175.5" ></text>
</g>
<g >
<title>_IO_fflush (1,000 samples, 0.85%)</title><rect x="252.1" y="165" width="10.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="255.05" y="175.5" ></text>
</g>
<g >
<title>_dl_relocate_object (6,000 samples, 5.13%)</title><rect x="1119.4" y="133" width="60.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1122.40" y="143.5" >_dl_re..</text>
</g>
<g >
<title>_dl_map_object (2,000 samples, 1.71%)</title><rect x="1079.1" y="85" width="20.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1082.06" y="95.5" ></text>
</g>
<g >
<title>_dl_cache_libcmp (1,000 samples, 0.85%)</title><rect x="1079.1" y="69" width="10.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1082.06" y="79.5" ></text>
</g>
<g >
<title>__write (2,000 samples, 1.71%)</title><rect x="635.3" y="69" width="20.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="638.30" y="79.5" ></text>
</g>
<g >
<title>_IO_file_setbuf@@GLIBC_2.17 (2,000 samples, 1.71%)</title><rect x="90.7" y="149" width="20.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="93.68" y="159.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (1,000 samples, 0.85%)</title><rect x="1089.1" y="69" width="10.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1092.15" y="79.5" ></text>
</g>
<g >
<title>_dl_catch_exception (3,000 samples, 2.56%)</title><rect x="1079.1" y="117" width="30.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1082.06" y="127.5" >_d..</text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.17 (1,000 samples, 0.85%)</title><rect x="352.9" y="149" width="10.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="355.91" y="159.5" ></text>
</g>
<g >
<title>ptmalloc_init.part.0 (5,000 samples, 4.27%)</title><rect x="675.6" y="53" width="50.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="678.64" y="63.5" >ptmal..</text>
</g>
<g >
<title>__aarch64_cas4_acq (1,000 samples, 0.85%)</title><rect x="30.2" y="165" width="10.1" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="33.17" y="175.5" ></text>
</g>
<g >
<title>_IO_cleanup (3,000 samples, 2.56%)</title><rect x="60.4" y="149" width="30.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="63.43" y="159.5" >_I..</text>
</g>
<g >
<title>_dl_map_object_deps (3,000 samples, 2.56%)</title><rect x="1079.1" y="133" width="30.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1082.06" y="143.5" >_d..</text>
</g>
<g >
<title>nanosleep (3,000 samples, 2.56%)</title><rect x="958.0" y="133" width="30.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="961.03" y="143.5" >na..</text>
</g>
<g >
<title>__tunable_get_val (1,000 samples, 0.85%)</title><rect x="1048.8" y="165" width="10.1" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1051.80" y="175.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.17 (5,000 samples, 4.27%)</title><rect x="574.8" y="101" width="50.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="577.79" y="111.5" >_IO_f..</text>
</g>
<g >
<title>_dl_fini (11,000 samples, 9.40%)</title><rect x="120.9" y="149" width="111.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="123.94" y="159.5" >_dl_fini</text>
</g>
<g >
<title>printf (5,000 samples, 4.27%)</title><rect x="988.3" y="181" width="50.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="991.29" y="191.5" >printf</text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.17 (1,000 samples, 0.85%)</title><rect x="514.3" y="133" width="10.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="517.27" y="143.5" ></text>
</g>
<g >
<title>usleep (1,000 samples, 0.85%)</title><rect x="796.7" y="165" width="10.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="799.67" y="175.5" ></text>
</g>
<g >
<title>all (117,000 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>__unregister_atfork (1,000 samples, 0.85%)</title><rect x="191.5" y="101" width="10.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="194.54" y="111.5" ></text>
</g>
<g >
<title>strchrnul (4,000 samples, 3.42%)</title><rect x="756.3" y="149" width="40.4" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="759.32" y="159.5" >str..</text>
</g>
<g >
<title>_IO_fflush (1,000 samples, 0.85%)</title><rect x="10.0" y="181" width="10.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>__run_exit_handlers (20,000 samples, 17.09%)</title><rect x="40.3" y="165" width="201.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="43.26" y="175.5" >__run_exit_handlers</text>
</g>
<g >
<title>exit (23,000 samples, 19.66%)</title><rect x="20.1" y="181" width="232.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="23.09" y="191.5" >exit</text>
</g>
<g >
<title>new_do_write (2,000 samples, 1.71%)</title><rect x="736.2" y="117" width="20.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="739.15" y="127.5" ></text>
</g>
<g >
<title>openaux (3,000 samples, 2.56%)</title><rect x="1079.1" y="101" width="30.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1082.06" y="111.5" >op..</text>
</g>
<g >
<title>_dl_sort_maps (2,000 samples, 1.71%)</title><rect x="201.6" y="133" width="20.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="204.62" y="143.5" ></text>
</g>
<g >
<title>_IO_doallocbuf (5,000 samples, 4.27%)</title><rect x="675.6" y="101" width="50.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="678.64" y="111.5" >_IO_d..</text>
</g>
<g >
<title>usleep (9,000 samples, 7.69%)</title><rect x="897.5" y="149" width="90.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="900.52" y="159.5" >usleep</text>
</g>
<g >
<title>_start (117,000 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >_start</text>
</g>
<g >
<title>__libc_start_main (103,000 samples, 88.03%)</title><rect x="10.0" y="197" width="1038.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__libc_start_main</text>
</g>
<g >
<title>main (73,000 samples, 62.39%)</title><rect x="252.1" y="181" width="736.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="255.05" y="191.5" >main</text>
</g>
<g >
<title>_dl_start (13,000 samples, 11.11%)</title><rect x="1048.8" y="197" width="131.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1051.80" y="207.5" >_dl_start</text>
</g>
<g >
<title>wait (18,000 samples, 15.38%)</title><rect x="806.8" y="165" width="181.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="809.75" y="175.5" >wait</text>
</g>
<g >
<title>_IO_default_setbuf (1,000 samples, 0.85%)</title><rect x="70.5" y="117" width="10.1" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="73.51" y="127.5" ></text>
</g>
<g >
<title>_dl_new_object (1,000 samples, 0.85%)</title><rect x="1109.3" y="133" width="10.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1112.32" y="143.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.17 (6,000 samples, 5.13%)</title><rect x="665.6" y="117" width="60.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="668.56" y="127.5" >_IO_fi..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (5,000 samples, 4.27%)</title><rect x="1129.5" y="117" width="50.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1132.49" y="127.5" >_dl_l..</text>
</g>
<g >
<title>rtld_lock_default_lock_recursive (1,000 samples, 0.85%)</title><rect x="231.9" y="149" width="10.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="234.88" y="159.5" ></text>
</g>
<g >
<title>malloc_hook_ini (5,000 samples, 4.27%)</title><rect x="675.6" y="69" width="50.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="678.64" y="79.5" >mallo..</text>
</g>
<g >
<title>printf (44,000 samples, 37.61%)</title><rect x="352.9" y="165" width="443.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="355.91" y="175.5" >printf</text>
</g>
<g >
<title>do_lookup_x (3,000 samples, 2.56%)</title><rect x="1149.7" y="101" width="30.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1152.66" y="111.5" >do..</text>
</g>
<g >
<title>printf@plt (1,000 samples, 0.85%)</title><rect x="1038.7" y="181" width="10.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1041.72" y="191.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.17 (9,000 samples, 7.69%)</title><rect x="574.8" y="117" width="90.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="577.79" y="127.5" >_IO_do_wri..</text>
</g>
<g >
<title>new_do_write (4,000 samples, 3.42%)</title><rect x="625.2" y="101" width="40.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="628.21" y="111.5" >new..</text>
</g>
<g >
<title>strcmp (1,000 samples, 0.85%)</title><rect x="1169.8" y="85" width="10.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1172.83" y="95.5" ></text>
</g>
<g >
<title>_IO_flush_all_lockp (1,000 samples, 0.85%)</title><rect x="80.6" y="133" width="10.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="83.60" y="143.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.17 (19,000 samples, 16.24%)</title><rect x="564.7" y="133" width="191.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="567.70" y="143.5" >_IO_file_xsputn@@GLIBC_2.17</text>
</g>
<g >
<title>_IO_file_sync@@GLIBC_2.17 (1,000 samples, 0.85%)</title><rect x="252.1" y="149" width="10.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="255.05" y="159.5" ></text>
</g>
<g >
<title>__call_tls_dtors (1,000 samples, 0.85%)</title><rect x="110.9" y="149" width="10.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="113.85" y="159.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.17 (4,000 samples, 3.42%)</title><rect x="524.4" y="133" width="40.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="527.36" y="143.5" >_IO..</text>
</g>
<g >
<title>exit (1,000 samples, 0.85%)</title><rect x="1179.9" y="197" width="10.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1182.91" y="207.5" ></text>
</g>
<g >
<title>_IO_file_setbuf@@GLIBC_2.17 (1,000 samples, 0.85%)</title><rect x="70.5" y="133" width="10.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="73.51" y="143.5" ></text>
</g>
<g >
<title>simple (117,000 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >simple</text>
</g>
<g >
<title>_IO_file_sync@@GLIBC_2.17 (3,000 samples, 2.56%)</title><rect x="262.1" y="165" width="30.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="265.14" y="175.5" >_I..</text>
</g>
<g >
<title>__write (1,000 samples, 0.85%)</title><rect x="655.5" y="85" width="10.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="658.47" y="95.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.17 (2,000 samples, 1.71%)</title><rect x="635.3" y="85" width="20.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="638.30" y="95.5" ></text>
</g>
<g >
<title>_dl_addr (5,000 samples, 4.27%)</title><rect x="675.6" y="37" width="50.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="678.64" y="47.5" >_dl_a..</text>
</g>
<g >
<title>_IO_cleanup (1,000 samples, 0.85%)</title><rect x="20.1" y="165" width="10.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="23.09" y="175.5" ></text>
</g>
<g >
<title>_dl_start_final (13,000 samples, 11.11%)</title><rect x="1048.8" y="181" width="131.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1051.80" y="191.5" >_dl_start_final</text>
</g>
<g >
<title>_dl_sysdep_start (12,000 samples, 10.26%)</title><rect x="1058.9" y="165" width="121.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1061.89" y="175.5" >_dl_sysdep_start</text>
</g>
<g >
<title>__do_global_dtors_aux (3,000 samples, 2.56%)</title><rect x="171.4" y="133" width="30.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="174.37" y="143.5" >__..</text>
</g>
<g >
<title>__vfprintf_internal (6,000 samples, 5.13%)</title><rect x="292.4" y="165" width="60.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="295.39" y="175.5" >__vfpr..</text>
</g>
<g >
<title>clock_nanosleep@@GLIBC_2.17 (3,000 samples, 2.56%)</title><rect x="958.0" y="117" width="30.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="961.03" y="127.5" >cl..</text>
</g>
<g >
<title>dl_main (12,000 samples, 10.26%)</title><rect x="1058.9" y="149" width="121.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1061.89" y="159.5" >dl_main</text>
</g>
<g >
<title>__cxa_finalize (2,000 samples, 1.71%)</title><rect x="181.5" y="117" width="20.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="184.45" y="127.5" ></text>
</g>
</g>
</svg>
